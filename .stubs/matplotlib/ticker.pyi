from typing import Any, Optional

class _DummyAxis:
    __name__: str = ...
    dataLim: Any = ...
    viewLim: Any = ...
    def __init__(self, minpos: int = ...) -> None: ...
    def get_view_interval(self): ...
    def set_view_interval(self, vmin: Any, vmax: Any) -> None: ...
    def get_minpos(self): ...
    def get_data_interval(self): ...
    def set_data_interval(self, vmin: Any, vmax: Any) -> None: ...
    def get_tick_space(self): ...

class TickHelper:
    axis: Any = ...
    def set_axis(self, axis: Any) -> None: ...
    def create_dummy_axis(self, **kwargs: Any) -> None: ...
    def set_view_interval(self, vmin: Any, vmax: Any) -> None: ...
    def set_data_interval(self, vmin: Any, vmax: Any) -> None: ...
    def set_bounds(self, vmin: Any, vmax: Any) -> None: ...

class Formatter(TickHelper):
    locs: Any = ...
    def __call__(self, x: Any, pos: Optional[Any] = ...) -> None: ...
    def format_ticks(self, values: Any): ...
    def format_data(self, value: Any): ...
    def format_data_short(self, value: Any): ...
    def get_offset(self): ...
    def set_locs(self, locs: Any) -> None: ...
    @staticmethod
    def fix_minus(s: Any): ...

class IndexFormatter(Formatter):
    labels: Any = ...
    n: Any = ...
    def __init__(self, labels: Any) -> None: ...
    def __call__(self, x: Any, pos: Optional[Any] = ...): ...

class NullFormatter(Formatter):
    def __call__(self, x: Any, pos: Optional[Any] = ...): ...

class FixedFormatter(Formatter):
    seq: Any = ...
    offset_string: str = ...
    def __init__(self, seq: Any) -> None: ...
    def __call__(self, x: Any, pos: Optional[Any] = ...): ...
    def get_offset(self): ...
    def set_offset_string(self, ofs: Any) -> None: ...

class FuncFormatter(Formatter):
    func: Any = ...
    offset_string: str = ...
    def __init__(self, func: Any) -> None: ...
    def __call__(self, x: Any, pos: Optional[Any] = ...): ...
    def get_offset(self): ...
    def set_offset_string(self, ofs: Any) -> None: ...

class FormatStrFormatter(Formatter):
    fmt: Any = ...
    def __init__(self, fmt: Any) -> None: ...
    def __call__(self, x: Any, pos: Optional[Any] = ...): ...

class StrMethodFormatter(Formatter):
    fmt: Any = ...
    def __init__(self, fmt: Any) -> None: ...
    def __call__(self, x: Any, pos: Optional[Any] = ...): ...

class OldScalarFormatter(Formatter):
    def __call__(self, x: Any, pos: Optional[Any] = ...): ...

class ScalarFormatter(Formatter):
    orderOfMagnitude: int = ...
    format: str = ...
    def __init__(
        self,
        useOffset: Optional[Any] = ...,
        useMathText: Optional[Any] = ...,
        useLocale: Optional[Any] = ...,
    ) -> None: ...
    def get_useOffset(self): ...
    offset: int = ...
    def set_useOffset(self, val: Any) -> None: ...
    useOffset: Any = ...
    def get_useLocale(self): ...
    def set_useLocale(self, val: Any) -> None: ...
    useLocale: Any = ...
    def get_useMathText(self): ...
    def set_useMathText(self, val: Any) -> None: ...
    useMathText: Any = ...
    def __call__(self, x: Any, pos: Optional[Any] = ...): ...
    def set_scientific(self, b: Any) -> None: ...
    def set_powerlimits(self, lims: Any) -> None: ...
    def format_data_short(self, value: Any): ...
    def format_data(self, value: Any): ...
    def get_offset(self): ...
    locs: Any = ...
    def set_locs(self, locs: Any) -> None: ...

class LogFormatter(Formatter):
    labelOnlyBase: Any = ...
    minor_thresholds: Any = ...
    def __init__(
        self,
        base: float = ...,
        labelOnlyBase: bool = ...,
        minor_thresholds: Optional[Any] = ...,
        linthresh: Optional[Any] = ...,
    ) -> None: ...
    def base(self, base: Any) -> None: ...
    def label_minor(self, labelOnlyBase: Any) -> None: ...
    def set_locs(self, locs: Optional[Any] = ...) -> None: ...
    def __call__(self, x: Any, pos: Optional[Any] = ...): ...
    def format_data(self, value: Any): ...
    def format_data_short(self, value: Any): ...

class LogFormatterExponent(LogFormatter): ...

class LogFormatterMathtext(LogFormatter):
    def __call__(self, x: Any, pos: Optional[Any] = ...): ...

class LogFormatterSciNotation(LogFormatterMathtext): ...

class LogitFormatter(Formatter):
    def __init__(
        self,
        *,
        use_overline: bool = ...,
        one_half: str = ...,
        minor: bool = ...,
        minor_threshold: int = ...,
        minor_number: int = ...,
    ) -> None: ...
    def use_overline(self, use_overline: Any) -> None: ...
    def set_one_half(self, one_half: Any) -> None: ...
    def set_minor_threshold(self, minor_threshold: Any) -> None: ...
    def set_minor_number(self, minor_number: Any) -> None: ...
    locs: Any = ...
    def set_locs(self, locs: Any): ...
    def __call__(self, x: Any, pos: Optional[Any] = ...): ...
    def format_data_short(self, value: Any): ...

class EngFormatter(Formatter):
    ENG_PREFIXES: Any = ...
    unit: Any = ...
    places: Any = ...
    sep: Any = ...
    def __init__(
        self,
        unit: str = ...,
        places: Optional[Any] = ...,
        sep: str = ...,
        *,
        usetex: Optional[Any] = ...,
        useMathText: Optional[Any] = ...,
    ) -> None: ...
    def get_usetex(self): ...
    def set_usetex(self, val: Any) -> None: ...
    usetex: Any = ...
    def get_useMathText(self): ...
    def set_useMathText(self, val: Any) -> None: ...
    useMathText: Any = ...
    def __call__(self, x: Any, pos: Optional[Any] = ...): ...
    def format_eng(self, num: Any): ...

class PercentFormatter(Formatter):
    xmax: Any = ...
    decimals: Any = ...
    def __init__(
        self,
        xmax: int = ...,
        decimals: Optional[Any] = ...,
        symbol: str = ...,
        is_latex: bool = ...,
    ) -> None: ...
    def __call__(self, x: Any, pos: Optional[Any] = ...): ...
    def format_pct(self, x: Any, display_range: Any): ...
    def convert_to_pct(self, x: Any): ...
    @property
    def symbol(self): ...
    @symbol.setter
    def symbol(self, symbol: Any) -> None: ...

class Locator(TickHelper):
    MAXTICKS: int = ...
    def tick_values(self, vmin: Any, vmax: Any) -> None: ...
    def set_params(self, **kwargs: Any) -> None: ...
    def __call__(self) -> None: ...
    def raise_if_exceeds(self, locs: Any): ...
    def nonsingular(self, v0: Any, v1: Any): ...
    def view_limits(self, vmin: Any, vmax: Any): ...
    def pan(self, numsteps: Any) -> None: ...
    def zoom(self, direction: Any) -> None: ...
    def refresh(self) -> None: ...

class IndexLocator(Locator):
    offset: Any = ...
    def __init__(self, base: Any, offset: Any) -> None: ...
    def set_params(
        self, base: Optional[Any] = ..., offset: Optional[Any] = ...
    ) -> None: ...  # type:ignore
    def __call__(self): ...
    def tick_values(self, vmin: Any, vmax: Any): ...

class FixedLocator(Locator):
    locs: Any = ...
    nbins: Any = ...
    def __init__(self, locs: Any, nbins: Optional[Any] = ...) -> None: ...
    def set_params(self, nbins: Optional[Any] = ...) -> None: ...  # type:ignore
    def __call__(self): ...
    def tick_values(self, vmin: Any, vmax: Any): ...

class NullLocator(Locator):
    def __call__(self): ...
    def tick_values(self, vmin: Any, vmax: Any): ...

class LinearLocator(Locator):
    presets: Any = ...
    def __init__(self, numticks: Optional[Any] = ..., presets: Optional[Any] = ...) -> None: ...
    @property
    def numticks(self): ...
    @numticks.setter
    def numticks(self, numticks: Any) -> None: ...
    def set_params(
        self, numticks: Optional[Any] = ..., presets: Optional[Any] = ...
    ) -> None: ...  # type:ignore
    def __call__(self): ...
    def tick_values(self, vmin: Any, vmax: Any): ...
    def view_limits(self, vmin: Any, vmax: Any): ...

class MultipleLocator(Locator):
    def __init__(self, base: float = ...) -> None: ...
    def set_params(self, base: Any) -> None: ...  # type:ignore
    def __call__(self): ...
    def tick_values(self, vmin: Any, vmax: Any): ...
    def view_limits(self, dmin: Any, dmax: Any): ...

class _Edge_integer:
    step: Any = ...
    def __init__(self, step: Any, offset: Any) -> None: ...
    def closeto(self, ms: Any, edge: Any): ...
    def le(self, x: Any): ...
    def ge(self, x: Any): ...

class MaxNLocator(Locator):
    default_params: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def set_params(self, **kwargs: Any) -> None: ...
    def __call__(self): ...
    def tick_values(self, vmin: Any, vmax: Any): ...
    def view_limits(self, dmin: Any, dmax: Any): ...

class LogLocator(Locator):
    numdecs: Any = ...
    numticks: Any = ...
    def __init__(
        self, base: float = ..., subs: Any = ..., numdecs: int = ..., numticks: Optional[Any] = ...
    ) -> None: ...
    def set_params(  # type:ignore
        self,
        base: Optional[Any] = ...,
        subs: Optional[Any] = ...,
        numdecs: Optional[Any] = ...,
        numticks: Optional[Any] = ...,
    ) -> None: ...
    def base(self, base: Any) -> None: ...
    def subs(self, subs: Any) -> None: ...
    def __call__(self): ...
    def tick_values(self, vmin: Any, vmax: Any): ...
    def view_limits(self, vmin: Any, vmax: Any): ...
    def nonsingular(self, vmin: Any, vmax: Any): ...

class SymmetricalLogLocator(Locator):
    numticks: int = ...
    def __init__(
        self,
        transform: Optional[Any] = ...,
        subs: Optional[Any] = ...,
        linthresh: Optional[Any] = ...,
        base: Optional[Any] = ...,
    ) -> None: ...
    def set_params(
        self, subs: Optional[Any] = ..., numticks: Optional[Any] = ...
    ) -> None: ...  # type:ignore
    def __call__(self): ...
    def tick_values(self, vmin: Any, vmax: Any): ...
    def view_limits(self, vmin: Any, vmax: Any): ...

class LogitLocator(MaxNLocator):
    def __init__(self, minor: bool = ..., *, nbins: str = ...) -> None: ...
    def set_params(self, minor: Optional[Any] = ..., **kwargs: Any) -> None: ...
    @property
    def minor(self): ...
    @minor.setter
    def minor(self, value: Any) -> None: ...
    def tick_values(self, vmin: Any, vmax: Any): ...
    def nonsingular(self, vmin: Any, vmax: Any): ...

class AutoLocator(MaxNLocator):
    def __init__(self) -> None: ...

class AutoMinorLocator(Locator):
    ndivs: Any = ...
    def __init__(self, n: Optional[Any] = ...) -> None: ...
    def __call__(self): ...
    def tick_values(self, vmin: Any, vmax: Any) -> None: ...

class OldAutoLocator(Locator):
    def __call__(self): ...
    def tick_values(self, vmin: Any, vmax: Any) -> None: ...
    def view_limits(self, vmin: Any, vmax: Any): ...
    def get_locator(self, d: Any): ...
