from typing import Any, Optional

import matplotlib.artist as martist
from matplotlib import cbook as cbook  # type:ignore
from matplotlib import docstring as docstring  # type:ignore
from matplotlib.cbook import index_of as index_of
from matplotlib.rcsetup import cycler as cycler
from matplotlib.rcsetup import validate_axisbelow as validate_axisbelow

class _axis_method_wrapper:
    attr_name: Any = ...
    method_name: Any = ...
    __doc__: Any = ...
    def __init__(
        self, attr_name: Any, method_name: Any, *, doc_sub: Optional[Any] = ...
    ) -> None: ...
    def __set_name__(self, owner: Any, name: Any): ...

class _TransformedBoundsLocator:
    def __init__(self, bounds: Any, transform: Any) -> None: ...
    def __call__(self, ax: Any, renderer: Any): ...

class _process_plot_var_args:
    axes: Any = ...
    command: Any = ...
    def __init__(self, axes: Any, command: str = ...) -> None: ...
    prop_cycler: Any = ...
    def set_prop_cycle(self, *args: Any, **kwargs: Any) -> None: ...
    def __call__(self, *args: Any, data: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def get_next_color(self): ...

class _AxesBase(martist.Artist):
    name: str = ...
    axes: Any = ...
    spines: Any = ...
    fmt_xdata: Any = ...
    fmt_ydata: Any = ...
    def __init__(
        self,
        fig: Any,
        rect: Any,
        facecolor: Optional[Any] = ...,
        frameon: bool = ...,
        sharex: Optional[Any] = ...,
        sharey: Optional[Any] = ...,
        label: str = ...,
        xscale: Optional[Any] = ...,
        yscale: Optional[Any] = ...,
        box_aspect: Optional[Any] = ...,
        **kwargs: Any,
    ) -> None: ...
    def get_window_extent(self, *args: Any, **kwargs: Any): ...
    bbox: Any = ...
    dataLim: Any = ...
    transScale: Any = ...
    def set_figure(self, fig: Any) -> None: ...
    @property
    def viewLim(self): ...
    def get_xaxis_transform(self, which: str = ...): ...
    def get_xaxis_text1_transform(self, pad_points: Any): ...
    def get_xaxis_text2_transform(self, pad_points: Any): ...
    def get_yaxis_transform(self, which: str = ...): ...
    def get_yaxis_text1_transform(self, pad_points: Any): ...
    def get_yaxis_text2_transform(self, pad_points: Any): ...
    def get_position(self, original: bool = ...): ...
    def set_position(self, pos: Any, which: str = ...) -> None: ...
    def reset_position(self) -> None: ...
    stale: bool = ...
    def set_axes_locator(self, locator: Any) -> None: ...
    def get_axes_locator(self): ...
    def sharex(self, other: Any) -> None: ...
    def sharey(self, other: Any) -> None: ...
    ignore_existing_data_limits: bool = ...
    callbacks: Any = ...
    lines: Any = ...
    patches: Any = ...
    texts: Any = ...
    tables: Any = ...
    artists: Any = ...
    images: Any = ...
    child_axes: Any = ...
    legend_: Any = ...
    collections: Any = ...
    containers: Any = ...
    title: Any = ...
    patch: Any = ...
    def cla(self) -> None: ...
    def clear(self) -> None: ...
    def get_facecolor(self): ...
    def set_facecolor(self, color: Any): ...
    def set_prop_cycle(self, *args: Any, **kwargs: Any) -> None: ...
    def get_aspect(self): ...
    def set_aspect(
        self,
        aspect: Any,
        adjustable: Optional[Any] = ...,
        anchor: Optional[Any] = ...,
        share: bool = ...,
    ) -> None: ...
    def get_adjustable(self): ...
    def set_adjustable(self, adjustable: Any, share: bool = ...) -> None: ...
    def get_box_aspect(self): ...
    def set_box_aspect(self, aspect: Optional[Any] = ...) -> None: ...
    def get_anchor(self): ...
    def set_anchor(self, anchor: Any, share: bool = ...) -> None: ...
    def get_data_ratio(self): ...
    def apply_aspect(self, position: Optional[Any] = ...) -> None: ...
    def axis(self, *args: Any, emit: bool = ..., **kwargs: Any): ...
    def get_legend(self): ...
    def get_images(self): ...
    def get_lines(self): ...
    def get_xaxis(self): ...
    def get_yaxis(self): ...
    get_xgridlines: Any = ...
    get_xticklines: Any = ...
    get_ygridlines: Any = ...
    get_yticklines: Any = ...
    def has_data(self): ...
    def add_artist(self, a: Any): ...
    def add_child_axes(self, ax: Any): ...
    def add_collection(self, collection: Any, autolim: bool = ...): ...
    def add_image(self, image: Any): ...
    def add_line(self, line: Any): ...
    def add_patch(self, p: Any): ...
    def add_table(self, tab: Any): ...
    def add_container(self, container: Any): ...
    def relim(self, visible_only: bool = ...) -> None: ...
    def update_datalim(self, xys: Any, updatex: bool = ..., updatey: bool = ...) -> None: ...
    def update_datalim_bounds(self, bounds: Any) -> None: ...
    def in_axes(self, mouseevent: Any): ...
    def get_autoscale_on(self): ...
    def get_autoscalex_on(self): ...
    def get_autoscaley_on(self): ...
    def set_autoscale_on(self, b: Any) -> None: ...
    def set_autoscalex_on(self, b: Any) -> None: ...
    def set_autoscaley_on(self, b: Any) -> None: ...
    @property
    def use_sticky_edges(self): ...
    @use_sticky_edges.setter
    def use_sticky_edges(self, b: Any) -> None: ...
    def set_xmargin(self, m: Any) -> None: ...
    def set_ymargin(self, m: Any) -> None: ...
    def margins(
        self, *margins: Any, x: Optional[Any] = ..., y: Optional[Any] = ..., tight: bool = ...
    ): ...
    def set_rasterization_zorder(self, z: Any) -> None: ...
    def get_rasterization_zorder(self): ...
    def autoscale(
        self, enable: bool = ..., axis: str = ..., tight: Optional[Any] = ...
    ) -> None: ...
    def autoscale_view(
        self, tight: Optional[Any] = ..., scalex: bool = ..., scaley: bool = ...
    ) -> None: ...
    def draw(self, renderer: Optional[Any] = ..., inframe: bool = ...) -> None: ...
    def draw_artist(self, a: Any) -> None: ...
    def redraw_in_frame(self) -> None: ...
    def get_renderer_cache(self): ...
    def get_frame_on(self): ...
    def set_frame_on(self, b: Any) -> None: ...
    def get_axisbelow(self): ...
    def set_axisbelow(self, b: Any) -> None: ...
    def grid(
        self, b: Optional[Any] = ..., which: str = ..., axis: str = ..., **kwargs: Any
    ) -> None: ...
    def ticklabel_format(
        self,
        *,
        axis: str = ...,
        style: str = ...,
        scilimits: Optional[Any] = ...,
        useOffset: Optional[Any] = ...,
        useLocale: Optional[Any] = ...,
        useMathText: Optional[Any] = ...,
    ) -> None: ...
    def locator_params(
        self, axis: str = ..., tight: Optional[Any] = ..., **kwargs: Any
    ) -> None: ...
    def tick_params(self, axis: str = ..., **kwargs: Any) -> None: ...
    axison: bool = ...
    def set_axis_off(self) -> None: ...
    def set_axis_on(self) -> None: ...
    def get_xlabel(self): ...
    def set_xlabel(
        self,
        xlabel: Any,
        fontdict: Optional[Any] = ...,
        labelpad: Optional[Any] = ...,
        *,
        loc: Optional[Any] = ...,
        **kwargs: Any,
    ): ...
    def invert_xaxis(self) -> None: ...
    xaxis_inverted: Any = ...
    def get_xbound(self): ...
    def set_xbound(self, lower: Optional[Any] = ..., upper: Optional[Any] = ...) -> None: ...
    def get_xlim(self): ...
    def set_xlim(
        self,
        left: Optional[Any] = ...,
        right: Optional[Any] = ...,
        emit: bool = ...,
        auto: bool = ...,
        *,
        xmin: Optional[Any] = ...,
        xmax: Optional[Any] = ...,
    ): ...
    get_xscale: Any = ...
    def set_xscale(self, value: Any, **kwargs: Any) -> None: ...
    get_xticks: Any = ...
    set_xticks: Any = ...
    get_xmajorticklabels: Any = ...
    get_xminorticklabels: Any = ...
    get_xticklabels: Any = ...
    set_xticklabels: Any = ...
    def get_ylabel(self): ...
    def set_ylabel(
        self,
        ylabel: Any,
        fontdict: Optional[Any] = ...,
        labelpad: Optional[Any] = ...,
        *,
        loc: Optional[Any] = ...,
        **kwargs: Any,
    ): ...
    def invert_yaxis(self) -> None: ...
    yaxis_inverted: Any = ...
    def get_ybound(self): ...
    def set_ybound(self, lower: Optional[Any] = ..., upper: Optional[Any] = ...) -> None: ...
    def get_ylim(self): ...
    def set_ylim(
        self,
        bottom: Optional[Any] = ...,
        top: Optional[Any] = ...,
        emit: bool = ...,
        auto: bool = ...,
        *,
        ymin: Optional[Any] = ...,
        ymax: Optional[Any] = ...,
    ): ...
    get_yscale: Any = ...
    def set_yscale(self, value: Any, **kwargs: Any) -> None: ...
    get_yticks: Any = ...
    set_yticks: Any = ...
    get_ymajorticklabels: Any = ...
    get_yminorticklabels: Any = ...
    get_yticklabels: Any = ...
    set_yticklabels: Any = ...
    xaxis_date: Any = ...
    yaxis_date: Any = ...
    def format_xdata(self, x: Any): ...
    def format_ydata(self, y: Any): ...
    def format_coord(self, x: Any, y: Any): ...
    def minorticks_on(self) -> None: ...
    def minorticks_off(self) -> None: ...
    def can_zoom(self): ...
    def can_pan(self): ...
    def get_navigate(self): ...
    def set_navigate(self, b: Any) -> None: ...
    def get_navigate_mode(self): ...
    def set_navigate_mode(self, b: Any) -> None: ...
    def start_pan(self, x: Any, y: Any, button: Any) -> None: ...
    def end_pan(self) -> None: ...
    def drag_pan(self, button: Any, key: Any, x: Any, y: Any): ...
    def get_children(self): ...
    def contains(self, mouseevent: Any): ...
    def contains_point(self, point: Any): ...
    def get_default_bbox_extra_artists(self): ...
    def get_tightbbox(
        self,
        renderer: Any,
        call_axes_locator: bool = ...,
        bbox_extra_artists: Optional[Any] = ...,
        *,
        for_layout_only: bool = ...,
    ): ...
    def twinx(self): ...
    def twiny(self): ...
    def get_shared_x_axes(self): ...
    def get_shared_y_axes(self): ...
